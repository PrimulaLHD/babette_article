[**Keywords:**]{} computational biology, evolution, phylogeny, BEAST2, R

Introduction
============

Phylogenies are commonly used to explore evolutionary hypotheses. Not
only can phylogenies show us how species (or other evolutionary units)
relate to each other, but also relevant parameters like extinction and
speciation rates can be estimated from them.

There are many phylogenetics tools available to obtain an estimate of
the phylogenetic tree of a given set of species. BEAST2
[@bouckaert2014beast] is one of the most widely used ones. It creates a
posterior of jointly-estimated phylogenies and model parameters, from a
DNA, RNA or amino acid alignment (see figure \[fig:workflow\] for an
overview of the workflow). It is a console application, that needs a
configuration file containing alignments and model parameters.

BEAST2 is bundled with BEAUti 2 [@drummond2012bayesian] (’BEAUti’ from
now on), a desktop application to create a BEAST2 configuration file.
BEAUti has a user-friendly graphical user interface, with helpful and
reasonable default settings. As such, BEAUti is an attractive
alternative to manual and error-prone editing of BEAST2 configuration
files.

BEAUti cannot be called from a command-line script. This implies that
when the user wants to explore the consequences of various settings,
this must be done manually. This is the common workflow when using a few
alignments and doing a superficial analysis of sensitivity of the
reconstructed tree to model settings.

However, for exploring many trees (for instance from simulations) and
for more thorough sensitivity analysis, one would like to loop through
multiple (simulated) alignments, nucleotide substitution models, clock
models and tree priors.

BEAST2 is also associated with Tracer [@tracer] and DensiTree
[@DensiTree]. Both are desktop applications to analyze the output of
BEAST2, each with a user-friendly graphical user interface.

Tracer’s purpose is to analyze the parameter estimates generated from a
BEAST 2 run. It shows, among others, the effective sample size (ESS) and
time series (’the trace’, hence the name) of each variable in the MCMC
run. Both ESS and trace are needed to assess the strength of the
inference. DensiTree visualizes the phylogenies of a BEAST2 posterior,
with many options to improve the displayal of those many phylogenies.

However, for exploring the output of many BEAST2 runs, one would like a
script to collect all parameter ESSes, parameter traces and posterior
phylogenies.

Here, to provide such functionality we present `babette`, ’BEAUti 2,
BEAST2 and Tracer for R’, which creates BEAST2 configuration files, runs
BEAST2, and analyzes its results, all from an R function call. This will
save time, tedious mouse clicking and reduces the chances of errors in
such repetitive actions. The interface of `babette` mimics the tools it
is inspired on. This familiarity helps both beginner and experienced
BEAST2 users to make the step from those tools to `babette`. `babette`
enables the creation of a single-script pipeline from sequence
alignments to posterior analysis in R.

`babette` is the first R package that unifies the full workflow of
working with BEAST2. An example to create a BEAST2 input file is
`BEASTmasteR` [@beastmaster]. Also `BEASTmasteR` allows to create BEAST2
configuration files from R. The difference is that `babette` has its
focus on DNA alignments and ultrametric trees, where `BEASTmasteR` is
used for morphological traits and tip-dating. Examples of R packages to
parse the BEAST2 output files are `rBEAST` [@rBEAST] and `RBEAST`
[@RBEAST].

Description
===========

`babette` is written in the R programming language [@R] and enables the
full BEAST2 workflow from an R function call, in a similar way that
BEAUti, DensiTree and Tracer do.

`babette`’s main function is `run_beast2`, which, configures BEAST2,
runs it and parses its output. `run_beast2` needs at least the name of a
FASTA file containing a DNA alignment. The default settings for the
other arguments of `run_beast2` are identical to BEAUti’s and BEAST2’s
default settings. Per alignment, a site model, clock model and tree
prior can be chosen. Multiple alignments can be used, each with its own
(unlinked) site model, clock model and tree prior.

`babette` currently has 61 exported functions to set up a BEAST2
configuration file. `babette` is an alternative for a majority of BEAUti
use cases, but does not yet support the full functionality of BEAUti.
Because of BEAUti’s high number of plugins, `babette` uses a software
architecture that expects te be extended.

`babette` has 7 exported function to run and help run BEAST2. One
function is a wrapper function to run BEAST2, others allow the user to
check if a BEAST2 configuration file is indeed valid.

`babette` has 20 exported function to parse the BEAST2 output files and
analyse the created posterior. `babette` gives the same ESSes and
summary statistics as Tracer. The data is formatted as such, that it can
easily be visualized using `ggplot2` (for a trace, similar to Tracer) or
`phangorn` [@phangorn] (for the phylogenies in a posterior, simular to
DensiTree).

Examples
========

In R, the functions of a package need to be loaded in the global
namespace first:

``` {.r language="R" floatplacement="H"}
library(babette)
```

BEAUti, and likewise `babette`, needs at least a FASTA filename to
produce a BEAST2 configuration file. In BEAUti, this is achieved by
loading a FASTA file, then saving an output file using a common save
file dialog. After this, BEAST2 needs to be invoked on the created
configuration file to create multiple files storing the created
posterior. Finally, these output files must be parsed by either Tracer
of DensiTree.

In `babette`, the same is achieved by:

``` {.r language="R" floatplacement="H"}
out <- run_beast2("alignment.fas")
```

This code will create a (temporary) BEAST2 configuration file, using a
FASTA file with name `alignment.fas`, using the same default settings as
BEAUti. `babette` will then execute a BEAST2 with that file, and parses
the output. The output, named `out`, is a list of parameter estimates,
posterior phylogenies (one per alignment) and operator acceptances.

The default settings for BEAUti (and thus `babette`) are, among others,
to use a Jukes-Cantor site model [@cantor1969mammalian], a strict clock,
and a Yule birth tree prior [@yule].

An example of using a different site model, clock model and tree prior
is:

``` {.r language="R" floatplacement="H"}
out <- run_beast2(
  "alignment.fas",
  site_models = create_hky_site_model(),
  clock_models = create_rln_clock_model(),
  tree_priors = create_bd_tree_prior()
)
```

This code uses an HKY site model, a relaxed log-normal clock model and a
birth-death tree prior, each with their default settings in BEAUti.
Table \[tab:functions\] shows an overview of all functions to create
site models, clock models and tree priors.

  **Name**                      **Description**
  ----------------------------- -------------------------------------------------------
  `create_beast2_input_file`    Creates a BEAST2 input file
  `create_gtr_site_model`       Create a GTR site model
  `create_hky_site_model`       Create an HKY site model
  `create_jc69_site_model`      Create a Jukes-Cantor site model
  `create_tn93_site_model`      Create a TN93 site model
  `create_rln_clock_model`      Create a relaxed log-normal clock model
  `create_strict_clock_model`   Create a strict clock model
  `create_bd_tree_prior`        Create a birth-death tree prior
  `create_cbs_tree_prior`       Create a coalescent Bayesian skyline tree prior
  `create_ccp_tree_prior`       Create a coalescent constant-population tree prior
  `create_cep_tree_prior`       Create a coalescent exponential-population tree prior
  `create_yule_tree_prior`      Create a Yule tree prior
  `create_beta_distr`           Create a beta distribution
  `create_exp_distr`            Create an exponential distribution
  `create_gamma_distr`          Create a gamma distribution
  `create_inv_gamma_distr`      Create an inverse gamma distribution
  `create_laplace_distr`        Create a Laplace distribution
  `create_log_normal_distr`     Create a log-normal distribution
  `create_normal_distr`         Create a normal distribution
  `create_one_div_x_distr`      Create a 1/X distribution
  `create_poisson_distr`        Create a Poisson distribution
  `create_uniform_distr`        Create a uniform distribution

  : babette’s main functions[]{data-label="tab:functions"}

Note that the arguments’ names `site_models`, `clock_models` and
`tree_priors` are plural, as each of these can be (a list of) one or
more elements. Each of these arguments must have the same number of
elements, so that each alignment has its own site model, clock model and
tree prior.

An example of two alignments, each with its own site model, is:

``` {.r language="R" floatplacement="H"}
out <- run_beast2(
  c("anthus_aco.fas", "anthus_nd2.fas"),
  site_models = list(
    create_tn93_site_model(), 
    create_gtr_site_model()
  )
)
```

`babette` also uses the same default distributions as BEAUti for the
site models, clock models and tree priors. For example, a Yule tree
prior assumes the birth rate follows a uniform distribution, from minus
infinity to plus infinity. This assumption implies that negative and
positive birth rates are just as likely, where a negative birth rate is
biologically impossible (note that in practice, this usually works out
just fine). One may prefer an exponential distribution instead, as this
would assume only positive birth rates, and makes high birth rates
unlikely.

The following script shows how to do this in `babette`:

``` {.r language="R" floatplacement="H"}
out <- run_beast2(
  "alignment.fas",
  tree_priors = create_yule_tree_prior(
    birth_rate_distr = create_exp_distr()    
  )
)
```

Our initial motivation to create `babette` is that we wanted to fix the
crown age of a phylogeny. BEAUti assumes that a phylogeny has a crown
age that needs to be jointly-estimated with the phylogeny and other
parameters. It does not allow for fixing the crown age. Without
`babette`, one needs to manually edit the BEAST2 configuration file,
which is tedious and prone to errors. Fixing the crown ages is
especially useful for theoretical experiments, as this allows for one
less source of variation.

This is how to specify a fixed crown age with `babette`:

``` {.r language="R" floatplacement="H"}
out <- run_beast2(
  "alignment.fas",
  posterior_crown_age = 15
)
```

`babette` allows for the same functionality of Tracer. Tracer, among
others, shows the effective sample sizes of each posterior’s variables.
As an MCMC run needs to converge first, Tracer discards the first 10% of
all parameter estimates. This is called the burn-in. To calculate the
effective sample sizes in `babette`, with the same burn-in of 10%:

``` {.r language="R" floatplacement="H"}
traces <- remove_burn_ins(traces = out$estimates, burn_in_fraction = 0.1)
esses <- calc_esses(traces, sample_interval = 1000)
```

Tracer displays multiple summary statistics for each estimated variable:
the mean and its standard error, standard deviation, variance, median,
mode, geometric mean, 95% highest posterior density interval,
auto-correlation time and effective sample size. To obtain all these
summary statistics of, for example, the estimated birth rate in
`babette`:

``` {.r language="R" floatplacement="H"}
sum_stats <- calc_sum_stats(
  out$estimates$birthRate, 
  sample_interval = 1000, 
  burn_in_fraction = 0.1
)
```

`babette` allows for the same functionality of DensiTree. DensiTree
displays the phylogenies in a posterior at the same time scale over one
another, allowing to see the uncertainty in topology and branch lengths.
To vizualize the same in `babette`:

``` {.r language="R" floatplacement="H"}
densitree(out$anthus_aco_trees)
```

babette development and other resources
=======================================

`babette` is free, libre and open source software available from the
official R package archive at
<http://cran.r-project.org/src/contrib/PACKAGES.html#babette> and is
licensed under the GNU General Public License v3.0.

`babette` uses the Travis CI [@travis] continuous integration service,
which is known to significantly increase the the number of bugs exposed
[@vasilescu2015] and increases the speed at which new features are added
[@vasilescu2015]. `babette` has a 100% code coverage, which correlates
with code quality [@horgan1994; @del1995correlation]. `babette` follows
Hadley Wickham’s style guide [@style_guide], which improves software
quality [@fang2001]. `babette` is dependent on multiple packages, which
are `APE` [@APE], `beautier` [@beautier], `beastier` [@beastier],
`devtools` [@devtools], `geiger` [@GEIGER], `ggplot2` [@ggplot2],
`knitr` [@knitr], `phangorn` [@phangorn], `rmarkdown` [@rmarkdown],
`seqinr` [@seqinr], `stringr` [@stringr], `testit` [@testit] and
`tracerer` [@tracerer] and `TreeSim` [@TreeSim].

`babette`’s development takes place on GitHub [@github],
<https://github.com/richelbilderbeek/babette>, which accomodates
collaboration [@perez2016ten] and improves transparency
[@gorgolewski2016practical]. `babette`’s GitHub facilitates feature
requests and has a guidelines how to do so.

`babette`’s documentation is extensive. All functions are documented in
the package’s internal documentation. For quick use, each exported
function shows a minimal example. For easy exploration, each exported
function’s documentation links to related functions. Additionally,
`babette` has a vignette that demonstrates extensively how to use it.
The GitHub documentation helps to get started, with a dozen examples of
BEAUti screenshots with equivalent `babette` code.

Citation of babette
===================

Scientists using `babette` in a published paper can cite this article,
and/or cite the `babette` package directly. To obtain this citation from
within an R script, use:

``` {.r language="R"}
> citation("babette")
```
