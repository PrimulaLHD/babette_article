<h1 id="introduction">Introduction</h1>
<p>Phylogenies are a commonly used tool to explore evolutionary hypotheses. Not only can phylogenies tell us how species relate to each other, also relevant parameters like extinction and speciation rates can be estimated from them.</p>
<p>BEAST2 <span class="citation"></span> is a Bayesian phylogenetics tool. BEAST2 creates a posterior of jointly-estimated phylonies and model parameters, from a DNA, RNA or amino acid alignment. BEAST2 is a console application, that needs a configuration file containing alignments and model parameters.</p>
<p>BEAST2 is bundled with the BEAUti <span class="citation"></span>. BEAUti is a program to create a BEAST2 XML configuration file, using a user-friendly graphical user interface, with helpful and reasonable default settings. BEAUti replaces the manual editing of the BEAST2 XML files.</p>
<p>BEAUti cannot be called from a command-line script, which is not a problem in all cases. For example, the BEAST book <span class="citation"></span> encourages to first infer a posterior from simpler models first, then exploring if adding complexity changes the inferred results. This can easily be done manually using BEAUti. For bigger theoretical explorations (for example, using thousands of simulated alignments), this approach becomes inviable.</p>
<p>Here, we present <code>beautier</code>, ’BEAUti for R’, which creates BEAST2 configuration files from an R function call. The interface of <code>beautier</code> mimics BEAUti and is easy to use. This familiar interface helps both beginner and experienced BEAST2 users to create configuration files from shell scripts.</p>
<p>=[] (A) [rectangle] <span> <img src="alignment.png" title="fig:" alt=" Workflow. From an alignment and priors, one creates a BEAST2 XML input file. This can be done using beautier or BEAUti. The created configuration file is run by lumier or BEAST2 to create a posterior of phylogenies and model parameter estimates. " style="width:20.0%" /> <img src="thought_cloud.png" title="fig:" alt=" Workflow. From an alignment and priors, one creates a BEAST2 XML input file. This can be done using beautier or BEAUti. The created configuration file is run by lumier or BEAST2 to create a posterior of phylogenies and model parameter estimates. " style="width:20.0%" /> </span>; (E) [below of=A, rectangle] <span> <img src="xml.png" title="fig:" alt=" Workflow. From an alignment and priors, one creates a BEAST2 XML input file. This can be done using beautier or BEAUti. The created configuration file is run by lumier or BEAST2 to create a posterior of phylogenies and model parameter estimates. " /> </span>; (F) [rectangle, below of=E] <span> <img src="DensiTreeExample2.jpg" title="fig:" alt=" Workflow. From an alignment and priors, one creates a BEAST2 XML input file. This can be done using beautier or BEAUti. The created configuration file is run by lumier or BEAST2 to create a posterior of phylogenies and model parameter estimates. " style="width:30.0%" /> <img src="ParameterEstimates.png" title="fig:" alt=" Workflow. From an alignment and priors, one creates a BEAST2 XML input file. This can be done using beautier or BEAUti. The created configuration file is run by lumier or BEAST2 to create a posterior of phylogenies and model parameter estimates. " style="width:60.0%" /> </span>; (A) edge [anchor = east] node <span><img src="beautier_logo.png" title="fig:" alt=" Workflow. From an alignment and priors, one creates a BEAST2 XML input file. This can be done using beautier or BEAUti. The created configuration file is run by lumier or BEAST2 to create a posterior of phylogenies and model parameter estimates. " /></span> (E) (A) edge [anchor = west] node <span><img src="BeautiSiteModel.png" title="fig:" alt=" Workflow. From an alignment and priors, one creates a BEAST2 XML input file. This can be done using beautier or BEAUti. The created configuration file is run by lumier or BEAST2 to create a posterior of phylogenies and model parameter estimates. " /></span> (E) (E) edge [anchor = east] node <span><img src="lumier_logo_big.png" title="fig:" alt=" Workflow. From an alignment and priors, one creates a BEAST2 XML input file. This can be done using beautier or BEAUti. The created configuration file is run by lumier or BEAST2 to create a posterior of phylogenies and model parameter estimates. " style="width:25.0%" /></span> (F) (E) edge [anchor = west] node <span><img src="beast_logo.png" title="fig:" alt=" Workflow. From an alignment and priors, one creates a BEAST2 XML input file. This can be done using beautier or BEAUti. The created configuration file is run by lumier or BEAST2 to create a posterior of phylogenies and model parameter estimates. " style="width:20.0%" /></span> (F);</p>
<h1 id="description">Description</h1>
<p><code>beautier</code> is written in the R programming language <span class="citation"></span>. <code>beautier</code> creates the BEAST2 input files from an R function call, in a similar way that BEAUti does.</p>
<p><code>beautier</code>’s main function is <code>create_beast2_input_file</code>, which creates an BEAST2 input file. <code>create_beast2_input_file</code> needs at least the name of a FASTA file containing a DNA alignment and a name for the to-be-created output file. This interface follows BEAUti’s default settings. Per alignment, a site model, clock model and tree priors can be chosen. Multiple alignments can be used, each with its own (unlinked) site model, clock model and tree prior.</p>
<table>
<caption>beautier’s functions<span data-label="tab:functions"></span></caption>
<thead>
<tr class="header">
<th align="left"><strong>Name</strong></th>
<th align="left"><strong>Description</strong></th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td align="left"><code>create_beast2_input_file</code></td>
<td align="left">Creates a BEAST2 input file</td>
</tr>
<tr class="even">
<td align="left"><code>create_gtr_site_model</code></td>
<td align="left">Create a GTR site model <span class="citation"></span></td>
</tr>
<tr class="odd">
<td align="left"><code>create_hky_site_model</code></td>
<td align="left">Create an HKY site model <span class="citation"></span></td>
</tr>
<tr class="even">
<td align="left"><code>create_jc69_site_model</code></td>
<td align="left">Create a Jukes-Cantor site model <span class="citation"></span></td>
</tr>
<tr class="odd">
<td align="left"><code>create_tn93_site_model</code></td>
<td align="left">Create a TN93 site model <span class="citation"></span></td>
</tr>
<tr class="even">
<td align="left"><code>create_rln_clock_model</code></td>
<td align="left">Create a relaxed log-normal clock model <span class="citation"></span></td>
</tr>
<tr class="odd">
<td align="left"><code>create_strict_clock_model</code></td>
<td align="left">Create a strict clock model <span class="citation"></span></td>
</tr>
<tr class="even">
<td align="left"><code>create_bd_tree_prior</code></td>
<td align="left">Create a birth-death tree prior <span class="citation"></span></td>
</tr>
<tr class="odd">
<td align="left"><code>create_cbs_tree_prior</code></td>
<td align="left">Create a coalescent Bayesian skyline tree prior</td>
</tr>
<tr class="even">
<td align="left"><code>create_ccp_tree_prior</code></td>
<td align="left">Create a coalescent constant-population tree prior</td>
</tr>
<tr class="odd">
<td align="left"><code>create_cep_tree_prior</code></td>
<td align="left">Create a coalescent exponential-population tree prior</td>
</tr>
<tr class="even">
<td align="left"><code>create_yule_tree_prior</code></td>
<td align="left">Create a Yule tree prior <span class="citation"></span></td>
</tr>
<tr class="odd">
<td align="left"><code>create_beta_distr</code></td>
<td align="left">Create a beta distribution</td>
</tr>
<tr class="even">
<td align="left"><code>create_exp_distr</code></td>
<td align="left">Create an exponential distribution</td>
</tr>
<tr class="odd">
<td align="left"><code>create_gamma_distr</code></td>
<td align="left">Create a gamma distribution</td>
</tr>
<tr class="even">
<td align="left"><code>create_inv_gamma_distr</code></td>
<td align="left">Create an inverse gamma distribution</td>
</tr>
<tr class="odd">
<td align="left"><code>create_laplace_distr</code></td>
<td align="left">Create a Laplace distribution</td>
</tr>
<tr class="even">
<td align="left"><code>create_log_normal_distr</code></td>
<td align="left">Create a log-normal distribution</td>
</tr>
<tr class="odd">
<td align="left"><code>create_normal_distr</code></td>
<td align="left">Create a normal distribution</td>
</tr>
<tr class="even">
<td align="left"><code>create_one_div_x_distr</code></td>
<td align="left">Create a 1/X distribution</td>
</tr>
<tr class="odd">
<td align="left"><code>create_poisson_distr</code></td>
<td align="left">Create a Poisson distribution</td>
</tr>
<tr class="even">
<td align="left"><code>create_uniform_distr</code></td>
<td align="left">Create a uniform distribution</td>
</tr>
</tbody>
</table>
<p>In total, <code>beautier</code> has 59 exported functions to create a BEAST2 configuration file. <code>beautier</code> is an alternative for a majority of BEAUti use cases. <code>beautier</code> does not support the full functionality of BEAUti. Considering BEAUti’s flexibility and number of plugins, this would be a Herculean effort. To compensate for this, an extensible software architecture is used. <code>beautier</code>s future extensions can be found on its GitHub.</p>
<p>BEAUti assumes that a phylogeny has a crown age that needs to be jointly-estimated with the phylogeny and other parameters. BEAUti does not allow for fixing a phylogeny’s crown age. Before <code>beautier</code>, one needs to manually edit the BEAST2 XML configuration file, which is prone to errors. <code>beautier</code>, allows easy fixing of phylogenies’ crown ages. For theoretical work, a fixed and known crown age can result in a cleaner analysis.</p>
<p><code>beastier</code> and <code>lumier</code> are related packages, used in testing. <code>lumier</code> calls BEAST2 from within R. <code>lumier</code> is used to confirm that the XML files created by <code>beautier</code> are valid. Additionally, <code>lumier</code> is used to run BEAST2 to create posteriors. Using <code>beastier</code>, these posteriors are checked to have an estimated or fixed crown age.</p>
<h1 id="examples">Examples</h1>
<p>In R, a package’s function need to be loaded in the global namespace first:</p>
<pre><code>library(beautier)</code></pre>
<p>BEAUti, and likewise <code>beautier</code>, need at least a FASTA filename and an XML output filename. In BEAUti, this is achieved by loading a FASTA file (resulting in figure [fig:simplest_beauti_usage]), then saving an output file using a common save file dialog. In <code>beautier</code>, the same is achieved by listing [lst:simplest_example]:</p>
<pre><code>library(beautier)
create_beast2_input_file(
  &quot;alignment.fas&quot;,
  &quot;beast2.xml&quot;
)</code></pre>
<div class="figure">
<img src="all_default.png" alt="Simplest BEAUti usage" />
<p class="caption">Simplest BEAUti usage<span data-label="fig:simplest_beauti_usage"></span></p>
</div>
<p>This code will create a BEAST2 file with name ’<code>beast2.xml</code>’, using a FASTA file with name <code>alignment.fas</code>, using the same default settings as BEAUti. The default settings are, among others, to use a Jukes-Cantor site model <span class="citation"></span>, a strict clock, and a Yule birth tree prior <span class="citation"></span>.</p>
<p>An example of using a different site model, clock model and tree prior is shown by listing [lst:all_different]:</p>
<pre><code>library(beautier)
create_beast2_input_file(
  &quot;alignment.fas&quot;,
  &quot;beast2.xml&quot;,
  site_models = create_hky_site_model(),
  clock_models = create_rln_clock_model(),
  tree_priors = create_bd_tree_prior()
)</code></pre>
<p>This code uses an HKY site model, a relaxed log-normal clock model and a birth-death tree prior <span class="citation"></span>. Table [tab:functions] shows an overview of all functions to create site models, clock models and tree priors.</p>
<p>The argument names <code>site_models</code>, <code>clock_models</code> and <code>tree_priors</code> are plural, as each of these can be (a list of) one or more elements. Each of these arguments must have the same number of elements, so that each alignment has its own site model, clock model and tree prior.</p>
<p><code>beautier</code> creates site models, clock models and tree priors with the same default distributions as BEAUti. For example, a Yule tree prior assumes that birth rate likelihoods follow a uniform distribution, from minus infinity to infinity. This assumption entails that negative and positive birth rates are just as likely, where a negative birth rate is biologically impossible. One may prefer to have an exponential distribution instead, as this would state that birth rates are always positive, and higher values are less likely than lower values. To do so <code>beautier</code> is shown by listing [lst:diff_distr]:</p>
<pre><code>library(beautier)
create_beast2_input_file(
  &quot;alignment.fas&quot;,
  &quot;beast2.xml&quot;,
  tree_priors = create_yule_tree_prior(
    birth_rate_distr = create_exp_distr()    
  )
)</code></pre>
<p>Novel about <code>beautier</code> is that it allows for specifying a fixed crown age. By default, a phylogeny’s crown age is jointly-estimated with the other parameters. Setting a fixed crown age is not yet possible in BEAUti directly, but it is documented how to manually edit the XML file to allow for a fixed crown age. Listing [lst:fixed_crown_age] shows how to specify a fixed crown age with <code>beautier</code>:</p>
<pre><code>create_beast2_input_file(
  &quot;alignment.fas&quot;,
  &quot;beast2.xml&quot;
  posterior_crown_age = 15
)</code></pre>
<h1 id="beautier-development-and-other-resources">beautier development and other resources</h1>
<p><code>beautier</code> is free, libre and open source software available from the official R package archive at <a href="http://cran.r-project.org/src/contrib/PACKAGES.html#beautier" class="uri">http://cran.r-project.org/src/contrib/PACKAGES.html#beautier</a>. <code>beautier</code> is licensed under the GNU General Public License.</p>
<p><code>beautier</code>’s development takes place on GitHub <span class="citation"></span>, which is a good practice for computational scientists <span class="citation"></span> and improves transparency <span class="citation"></span>.</p>
<p><code>beautier</code>’s uses the Travis CI <span class="citation"></span> continuous integration service, which is known to significantly increase the the number of bugs exposed <span class="citation"></span>. <code>beautier</code> has a 100% code coverage, which correlates with code quality <span class="citation"></span>. <code>beautier</code> follows Hadley Wickham’s style guide <span class="citation"></span>, which improves software quality <span class="citation"></span>.</p>
<p><code>beautier</code> is dependent on multiple packages, which are <code>APE</code> <span class="citation"></span>, <code>beastier</code> <span class="citation"></span>, <code>devtools</code> <span class="citation"></span>, <code>geiger</code> <span class="citation"></span>, <code>ggplot2</code> <span class="citation"></span>, <code>knitr</code> <span class="citation"></span>, <code>lumier</code> <span class="citation"></span>, <code>phangorn</code> <span class="citation"></span>, <code>rmarkdown</code> <span class="citation"></span>, <code>seqinr</code> <span class="citation"></span>, <code>stringr</code> <span class="citation"></span>, <code>testit</code> <span class="citation"></span> and <code>TreeSim</code> <span class="citation"></span>.</p>
<p><code>beautier</code>’s documentation is extensive, yet concise. All functions are documented in the package’s internal documentation. For quick use, each exported function shows a minimal example. For easy exploration, each exported function’s documentation links to related functions. Additionally, <code>beautier</code> has a vignette that demonstrates in a longer form how to use it. The integrity of this documentation is tested by Travis CI. The GitHub documentation helps to get started, with a dozen examples of a BEAUti screenshot and the equivalent <code>beautier</code> code.</p>
<p><code>beautier</code>’s GitHub facilitates feature requests and has guidelines how to do so. Thanks to Travis CI, newly submitted code is expected to be accepted quicker <span class="citation"></span>.</p>
<h1 id="citation-of-beautier">Citation of beautier</h1>
<p>Scientists using <code>beautier</code> in a published paper should cite this article. Users can additionally cite the <code>beautier</code> package directly. Citation information can be obtained by typing:</p>
<div class="sourceCode" language="R"><pre class="sourceCode r"><code class="sourceCode r"><span class="op">&gt;</span><span class="st"> </span><span class="kw">citation</span>(<span class="st">&quot;beautier&quot;</span>)</code></pre></div>
<p>from within R.</p>
